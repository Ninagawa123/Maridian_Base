■ MeridianでのEEPROMの扱い
EEPROMにはサーボ等のハードウェア関連の初期設定を格納する。
基本的にはMeridimと同じ配列を使用する。
デフォルトではMeridim90を3配列分書き込むようにする(540byte、meridimの要素が180個まで増えてもギリ流用できるサイズ）

■ EEPROMの利用可能サイズ（検索調べ）
ESP32 4096 bytes
Teensy 1080 bytes　

■ データ形式(meridim配列)
＜meridim配列１つ目＞
index[0] 配列長さ(デフォルトは90)
index[20] サーボL系ID0のデータ（0:搭載なし,+値:正転、-値:逆転）/ 数値にはサーボタイプが入る
          +1:KONDO KRS +2:KONDO RS485 +3:FUTABA TTL: +4 :FUTABARS485 
          +5:ROBOTIS TTL +6:ROBOTIS RS485 +7:JRPROPO +8:HiTECH +9:未定 +10:PWM
         (※+-1以外は未導入、サーボタイプはMeridian90のindex[20]の型番コードに準拠)
index[21] サーボL系ID0の数値データ：上記サーボタイプに応じたサーボ値のトリムデータを入れる
index[22]~ [20][21]と同様の組み合わせの繰り返し

＜meridim配列２つ目＞
index[0] 配列長さ(デフォルトは90)
index[21] ホームポジション値、単位は＜meridim配列１つ目＞のサーボタイプ準拠
index[22]~ [20][21]と同様の組み合わせの繰り返し

＜meridim配列３つ目＞
index[0] 配列長さ(デフォルトは90)
index[21] サーボL系ID0の数値データ：ジャイロ補正係数
index[22]~ [20][21]と同様の組み合わせの繰り返し


■ 上記データがソースコード上で反映される変数（TWINのTeensy、LITEのESP32）
/* 各サーボのマウントありなし */
int idl_mt[15]; // L系統
int idr_mt[15]; // R系統
/* 各サーボの正逆方向補正用配列 */
float idl_cw[15]; // L系統
float idr_cw[15]; // R系統
/* 各サーボの直立ポーズトリム値 */
int idl_trim[15]; // L系統
int idr_trim[15]; // R系統

これらをsetup()内で設定する。

未定義だが、係数の変数名は下記を想定
/* 各サーボのジャイロ補正用配列 */
float idl_gyrofb[15]; // L系統 
float idr_gyrofb[15]; // R系統
/* 各サーボの傾き補正用配列 */
float idl_tiltfb[15]; // L系統
float idr_tiltfb[15]; // R系統

■ 書き込み、読み込みコマンド
通常のmeridim90でのデータ通信時のデータとして
meridim[0] = 10 で書き込み（できれば読み込みまで一連で組む）
meridim[0] = 11 で読み込み（読み込んだデータをMeridimに載せPC等で確認できるようにする）
この値をトリガーとして、Teensy(ESP32)は一連の作業を実行する。
よって、通常の送受信時にも、EEPROMの書き込み、読み込みができる。

■ EEPROMへの書き込み手続き
meridim形式として[88]にmeridim同様のチェックサム（合計して反転）を入れたものを、EEPROMに書き込む

■ ボード起動時の挙動について
EEPROMにデータがあればまず読み込む。meridim形式は先頭データが配列数なので、
そのまま読み込む。データはとりあえず3配列分(540byte)確保。
各データについてベリファイして有効なものを採用。（なのでごく基本的な1列目だけでも機能する）
マスターコマンド[3]のヘルスチェックトリガーを利用して、一連のヘルスチェックシーケンスを送信する（内容詳細未定）
