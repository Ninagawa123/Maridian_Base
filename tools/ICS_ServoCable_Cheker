//ICS_ServoCable_Cheker for Teensy4.0+Meridian Board
//
//メリディアンボードに接続した近藤サーボの断線をチェックできるスクリプトです。
//関節の角度によって一瞬だけ断線するような症状の検出もできるので便利です。
//
//使い方 https://qiita.com/Ninagawa_Izumi/items/7ac74c13d2ac6ff94b21
//
//① 「★接続しているサーボIDの設定」のところに該当のサーボIDを入れます。
//② 本体のサーボ線がループになっている場合には、サーボ末端のコネクタを外してください。
//③ MeridianBoard上のTeensy4.0にこのスクリプトをアップロードします。
//④ シリアルモニタを開くと、サーボからの返信データが流れます。
//⑤ サーボは脱力状態です。手でサーボの怪しいところをグリグリ動かします。
//⑥ 断線箇所が見つかり次第、「FOUND DISCONNECT〜」と１箇所について断線を表示します。
//※スクリプトが正常に動いているかをテストするには、テスト中に任意のサーボコネクタを抜いてみてください。

#include <IcsHardSerialClass.h> //ICSサーボのライブラリ導入

//★接続しているサーボIDの設定
char krs_L_array[] = {0,1,2,3,4,5,6,7,8,9,10};//左系統に接続しているサーボのID番号を必要な個数だけ入れる
char krs_R_array[] = {0,1,2,3,4,5,6,7,8,9,10};//右系統に接続しているサーボのID番号を必要な個数だけ入れる

//ICSサーボ設定用変数
const byte EN_L_PIN = 6;
const byte EN_R_PIN = 5;
const long BAUDRATE = 1250000;
const int TIMEOUT = 2; //返信待ちのタイムアウト時間。例では1だと失敗。
IcsHardSerialClass krs_L(&Serial2, EN_L_PIN, BAUDRATE, TIMEOUT); //インスタンス＋ENピン(23番ピン)およびUARTの指定
IcsHardSerialClass krs_R(&Serial3, EN_R_PIN, BAUDRATE, TIMEOUT); //インスタンス＋ENピン(2番ピン)およびUARTの指定


//各サーボの計算用変数
int k;
int once = 100;//初めて無返信を検知したサーボIDをキープする変数
String lr = "x";//上記IDが右系統か左系統かをキープする変数

void setup() {
  //PCでのシリアルモニタ表示
  Serial.begin(60000000);//シリアルモニター表示
  krs_L.begin(); //サーボモータの通信初期設定。Serial2
  krs_R.begin(); //サーボモータの通信初期設定。Serial3
}

void loop() {

  Serial.print("LEFT :");
  for (int i = 0; i < sizeof(krs_L_array); i ++) {
    k = krs_L.setFree(krs_L_array[i]);//1以外ならとりあえずサーボを脱力し位置を取得
    delayMicroseconds(2);
    Serial.print(k);
    Serial.print(",");
    if ((k == -1) and (once == 100))//初めて無返信を検知したかどうか
    {
      Serial.println();
      Serial.print("*FOUND DISCONNECT : LEFT - ");//エラーサーボの表示
      Serial.println(int(krs_L_array[i]));
      lr = "LEFT -";
      once = int(krs_L_array[i]);
      delay(1000);
    }
  }
  //Serial.println();

  Serial.print(" RIGHT:");
  for (int i = 0; i < sizeof(krs_R_array); i ++) {
    k = krs_R.setFree(krs_R_array[i]);//1以外ならとりあえずサーボを脱力し位置を取得
    delayMicroseconds(2);//※ICSの高速通信用に必須
    Serial.print(k);
    Serial.print(",");
    if ((k == -1) and (once == 100))
    {
      Serial.println();
      Serial.print("*FOUND DISCONNECT : RIGHT -");
      Serial.println(int(krs_R_array[i]));
      lr = "RIGHT -";
      once = int(krs_R_array[i]);
      delay(1000);
    }
  }
  Serial.println();

  if (once != 100) {//一度キープした返信のないサーボIDを表示し続ける
    Serial.print("** CHECK ");
    Serial.print(lr);
    Serial.print(once);
    Serial.println();
  }
  delayMicroseconds(2);
}

